/*
 * generated by Xtext 2.9.1
 */
package org.casualintellect.validation

import java.util.LinkedList
import java.util.List
import org.casualintellect.casualIntellect.CasualIntellectPackage
import org.casualintellect.casualIntellect.Model
import org.casualintellect.casualIntellect.Transition
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.validation.Check

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CasualIntellectValidator extends AbstractCasualIntellectValidator {

	@Check
	def checkTransitions(Model model) {
		var states = model.list_of_states;
		val listOfStateNames = new LinkedList<String>();
		for (var i = 0; i < states.length; i++) {
			var state = states.get(i);
			listOfStateNames.add(state.name);
		}

		for (var i = 0; i < states.length; i++) {
			val state = states.get(i);
			val name = state.name;
			var list = listOfStateNames.filter[equals(name)]

			if (list.size > 1) {
				error('There are several states with the same name:' + name, CasualIntellectPackage.Literals.STATE,
					CasualIntellectPackage::eINSTANCE.state_Name)
			}

		}

		for (var i = 0; i < states.length; i++) {
			val state = states.get(i);
			val transitionsList = state.transitions.list;

			transitionsList.forEach[transition|checkTransition(state, transition, listOfStateNames)]

		}
	}

	def checkTransition(EObject state, Transition transition, List<String> stateNamesList) {
		if (!stateNamesList.contains(transition.name)) {
			val index = foundIndex(transition);
			error('No state for transition ' + transition.name, state, CasualIntellectPackage::eINSTANCE.state_Name,
				index)
		}
	}

	def foundIndex(EObject object) {
		val container = object.eContainer;
		var index = container.eContents.indexOf(object);
		index;
	}

}
