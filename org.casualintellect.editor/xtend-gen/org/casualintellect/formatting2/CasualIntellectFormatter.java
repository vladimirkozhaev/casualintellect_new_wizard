/**
 * generated by Xtext 2.9.1
 */
package org.casualintellect.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import org.casualintellect.casualIntellect.CasualIntellectPackage;
import org.casualintellect.casualIntellect.Model;
import org.casualintellect.casualIntellect.ProcessAfterState;
import org.casualintellect.casualIntellect.ProcessBeforeState;
import org.casualintellect.casualIntellect.ProcessInState;
import org.casualintellect.casualIntellect.State;
import org.casualintellect.casualIntellect.Transition;
import org.casualintellect.casualIntellect.Transitions;
import org.casualintellect.services.CasualIntellectGrammarAccess;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegion;
import org.eclipse.xtext.formatting2.regionaccess.ISemanticRegionsFinder;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class CasualIntellectFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CasualIntellectGrammarAccess _casualIntellectGrammarAccess;
  
  protected void _format(final Model model, @Extension final IFormattableDocument document) {
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.setNewLines(0, 0, 1);
      it.noSpace();
    };
    Model _prepend = document.<Model>prepend(model, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.<Model>append(_prepend, _function_1);
    EList<State> _list_of_states = model.getList_of_states();
    for (final State list_of_states : _list_of_states) {
      document.<State>format(list_of_states);
    }
  }
  
  protected void _format(final State state, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(state);
    final ISemanticRegion open = _regionFor.keyword("{");
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(state);
    final ISemanticRegion close = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(open, _function);
    ISemanticRegionsFinder _regionFor_2 = this.textRegionExtensions.regionFor(state);
    ISemanticRegion _feature = _regionFor_2.feature(CasualIntellectPackage.Literals.STATE__NAME);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.oneSpace();
    };
    document.surround(_feature, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(open, close, _function_2);
    ProcessBeforeState _before = state.getBefore();
    document.<ProcessBeforeState>format(_before);
    ProcessAfterState _after = state.getAfter();
    document.<ProcessAfterState>format(_after);
    ProcessInState _inProcess = state.getInProcess();
    document.<ProcessInState>format(_inProcess);
    Transitions _transitions = state.getTransitions();
    document.<Transitions>format(_transitions);
    final Procedure1<IHiddenRegionFormatter> _function_3 = (IHiddenRegionFormatter it) -> {
      it.noSpace();
    };
    document.prepend(close, _function_3);
    final Procedure1<IHiddenRegionFormatter> _function_4 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(close, _function_4);
  }
  
  protected void _format(final ProcessBeforeState beforeState, @Extension final IFormattableDocument document) {
    this.processStateAction("before", beforeState, document);
  }
  
  protected void _format(final ProcessAfterState afterState, @Extension final IFormattableDocument document) {
    this.processStateAction("after", afterState, document);
  }
  
  protected void _format(final ProcessInState inState, @Extension final IFormattableDocument document) {
    this.processStateAction("after", inState, document);
  }
  
  protected void _format(final Transitions transitions, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(transitions);
    final ISemanticRegion left = _regionFor.keyword("{");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(left, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(transitions);
    final ISemanticRegion right = _regionFor_1.keyword("}");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.<ISemanticRegion, ISemanticRegion>interior(left, right, _function_1);
    final Procedure1<IHiddenRegionFormatter> _function_2 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(right, _function_2);
    final EList<Transition> transitionsList = transitions.getList();
    for (final Transition transition : transitionsList) {
      document.<Transition>format(transition);
    }
  }
  
  protected void _format(final Transition transition, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(transition);
    final ISemanticRegion transitionKeyword = _regionFor.keyword("transition");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.prepend(transitionKeyword, _function);
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.prepend(transitionKeyword, _function_1);
  }
  
  public void processStateAction(final String keyword, final EObject action, @Extension final IFormattableDocument document) {
    ISemanticRegionsFinder _regionFor = this.textRegionExtensions.regionFor(action);
    final ISemanticRegion before = _regionFor.keyword("before");
    final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
      it.indent();
    };
    document.prepend(before, _function);
    ISemanticRegionsFinder _regionFor_1 = this.textRegionExtensions.regionFor(action);
    final ISemanticRegion semicolon = _regionFor_1.keyword(";");
    final Procedure1<IHiddenRegionFormatter> _function_1 = (IHiddenRegionFormatter it) -> {
      it.newLine();
    };
    document.append(semicolon, _function_1);
  }
  
  public void format(final Object model, final IFormattableDocument document) {
    if (model instanceof XtextResource) {
      _format((XtextResource)model, document);
      return;
    } else if (model instanceof Model) {
      _format((Model)model, document);
      return;
    } else if (model instanceof ProcessAfterState) {
      _format((ProcessAfterState)model, document);
      return;
    } else if (model instanceof ProcessBeforeState) {
      _format((ProcessBeforeState)model, document);
      return;
    } else if (model instanceof ProcessInState) {
      _format((ProcessInState)model, document);
      return;
    } else if (model instanceof State) {
      _format((State)model, document);
      return;
    } else if (model instanceof Transition) {
      _format((Transition)model, document);
      return;
    } else if (model instanceof Transitions) {
      _format((Transitions)model, document);
      return;
    } else if (model instanceof EObject) {
      _format((EObject)model, document);
      return;
    } else if (model == null) {
      _format((Void)null, document);
      return;
    } else if (model != null) {
      _format(model, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(model, document).toString());
    }
  }
}
